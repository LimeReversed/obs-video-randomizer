import obspython as obsimport osfrom Helpers import file_helperclass Resource(object):    def __init__(self, resource, release):        self.resource = resource        self.release = release    def __enter__(self):        return self.resource    def __exit__(self, *args):        if self.resource:            self.release(self.resource)class Source(Resource):    def __init__(self, source):        super().__init__(source, obs.obs_source_release)    @staticmethod    def construct_source_from_name(source_name):        return Source(obs.obs_source_get_name(source_name))    @staticmethod    def construct_current_scene():        return Source(obs.obs_frontend_get_current_scene)    def get_source_name(self):        return obs.obs_source_get_name(self.resource)    def set_array(self, data_array):        with data_array as data_array:            obs.obs_source_update(self.resource, data_array)class Data(Resource):    def __init__(self, data):        super().__init__(data, obs.obs_data_release)    value_getters = {        "str": obs.obs_data_get_string,        "int": obs.obs_data_get_int,        "bool": obs.obs_data_get_bool,        "array": obs.obs_data_get_array,    }    value_setters = {        "str": obs.obs_data_set_string,        "int": obs.obs_data_set_int,        "bool": obs.obs_data_set_bool,        "array": obs.obs_data_set_array,    }    @staticmethod    def construct_source_settings(source):        return Data(obs.obs_source_get_settings(source))    def get_value(self, data_type, value_name):        return Data.value_getters[data_type](self.resource, value_name)    def set_value(self, data_type, value_name, value):        return Data.value_setters[data_type](self.resource, value_name, value)class DataArray(Resource):    def __init__(self, data_array):        super().__init__(data_array, obs.obs_data_array_release)    def extract_values_from_array_data(self, data_type, value_name="value"):        file_list = []        if self.resource:            count = obs.obs_data_array_count(self.resource)            for i in range(count):                with Data(obs.obs_data_array_item(self.resource, i)) as item:                    if item:                        value = item.get_value(data_type, value_name)                        if value:                            file_list.append(value)        return file_list    # def set_array(self, data_array):    #    with Source(source_name) as source:    #        if source:    #            with SourceSettings(source) as data:    #                if data:    #                    array = obs.obs_data_array_create()    #    #                    for list_item in new_list:    #                        item = obs.obs_data_create()    #                        obs.obs_data_set_string(item, "value", list_item)    #                        obs.obs_data_array_push_back(array, item)    #                        obs.obs_data_release(item)    #    #                    obs.obs_data_set_array(data, "used_videos", array)    #                    obs.obs_source_update(source, data)    #                    used_videos_array = obs.obs_data_get_array(data, "used_videos")    #    #                    obs.obs_data_array_release(array)    #                    obs.obs_data_array_release(used_videos_array)    # List to data_array    # Set array to data object (Source settings) - obs.obs_data_set_array(data, "used_videos", array)    # Put data object to source - obs.obs_source_update(source, data)    @staticmethod    def construct_from_list(new_list, data_type, value_name):        with DataArray(obs.obs_data_array_create()) as array:            for list_item in new_list:                with Data(obs.obs_data_create()) as item:                    item.set_value(data_type, value_name, list_item)                    obs.obs_data_array_push_back(array, item)            return arraydef extract_paths_from_names(new_array):    file_list = []    for file_name in new_array:        if os.path.isdir(file_name):            extracted_video_files = file_helper.get_files(file_name)            file_list += extracted_video_files        elif os.path.isfile(file_name):            file_list += file_name    return file_list